{
    "AWSTemplateFormatVersion" : "2010-09-09",

    "Description" : "MongoDb Arbiter deployment",

    "Parameters" : {
        "KeyName" : {
            "Description" : "Name of an existing EC2 KeyPair to enable SSH access",
            "Type" : "String" 
        },
        
        "ArbiterInstanceType" : {
            "Type" : "String", 
            "Default" : "t1.micro", 
            "AllowedValues" : [ "t1.micro", "m1.small", "m1.medium", "m1.large" ],
            "Description" : "Arbiter EC2 instance type (e.g. t1.micro, m1.small,..)"
        },
        
        "ReplicaSetName" : {
            "Description" : "Name for the MongoDB replica set",
            "Type" : "String",
            "Default" : "MyReplicaSet"
        },
        
        "AccessKeyId" : {
            "Description" : "Access Key ID",
            "Type" : "String"
        },

        "SecretAccessKey" : {
            "Description" : "Secret Access Key for the specified Access Key ID",
            "Type" : "String"
        },

        "SecurityGroupName" : {
            "Description" : "MongoDB replica set security group name",
            "Type" : "String"
        }
    },

    "Mappings" : {
        "InstanceTypeArch" : {
        	"t1.micro"    : { "Arch" : "64" },
            "m1.small"    : { "Arch" : "64" },
            "m1.medium"   : { "Arch" : "64" },
            "m1.large"    : { "Arch" : "64" },
            "m1.xlarge"   : { "Arch" : "64" },
            "m2.xlarge"   : { "Arch" : "64" },
            "m2.2xlarge"  : { "Arch" : "64" },
            "m2.4xlarge"  : { "Arch" : "64" },
            "c1.medium"   : { "Arch" : "64" },
            "c1.xlarge"   : { "Arch" : "64" },
            "cc1.4xlarge" : { "Arch" : "64HVM" }
        },

        "RegionImageZone" : {
            "us-east-1"      : { "64" : "ami-e565ba8c", "64HVM" : "ami-e965ba80" },
            "us-west-2"      : { "64" : "ami-3ac64a0a", "64HVM" : "NOT_YET_SUPPORTED" },
            "us-west-1"      : { "64" : "ami-e78cd4a2", "64HVM" : "NOT_YET_SUPPORTED" },
            "eu-west-1"      : { "64" : "ami-f9231b8d", "64HVM" : "NOT_YET_SUPPORTED" },
            "ap-southeast-1" : { "64" : "ami-be3374ec", "64HVM" : "NOT_YET_SUPPORTED" },
            "ap-northeast-1" : { "64" : "ami-e47acbe5", "64HVM" : "NOT_YET_SUPPORTED" },
            "sa-east-1"      : { "64" : "ami-a6855bbb", "64HVM" : "NOT_YET_SUPPORTED" }
        }
    },

    "Resources" : {
        "MongoArbiter" : {
            "Type" : "AWS::EC2::Instance",
            "Metadata" : {
                "AWS::CloudFormation::Init" : {
                    "config" : {
                        "packages" : {
                            "yum" : {
                                "mdadm" : [],
                                "sysstat" : []
                            }
                        },
                        "files" : {
                            "/etc/yum.repos.d/10gen.repo" : {
                                "content" : { "Fn::Join" : ["", [
                                    "[10gen]\n",
                                    "name=10gen Repository\n",
                                    "baseurl=http://downloads-distro.mongodb.org/repo/redhat/os/x86_64\n",
                                    "gpgcheck=0\n"
                                ] ] },
                                "mode" : "000644",
                                "owner" : "root",
                                "group" : "root"
                            }
                        }
                    }
                }
            },

            "Properties" : {
                "InstanceType" : { "Ref" : "ArbiterInstanceType" },
                "Tags" : [
          			{"Key" : "Name", "Value" : "MongoArbiter" },
          			{"Key" : "Owner", "Value" : "IntegratingStuff" }
        		],
                "ImageId" : { "Fn::FindInMap" : [ "RegionImageZone", { "Ref" : "AWS::Region" }, 
                    { "Fn::FindInMap" : [ "InstanceTypeArch", { "Ref" : "ArbiterInstanceType" }, "Arch" ] } ] },
                "SecurityGroups" : [ { "Ref" : "SecurityGroupName" } ],
                "KeyName" : { "Ref" : "KeyName" },
                "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
                    "#!/bin/bash\n",
                    "yum update -y aws-cfn-bootstrap\n",

                    "## Error reporting helper function\n",
                    "function error_exit\n",
                    "{\n",
                    "   /opt/aws/bin/cfn-signal -e 1 -r \"$1\" '", { "Ref" : "WaitHandleMongoArbiter" }, "'\n",
                    "   exit 1\n",
                    "}\n",

                    "## Initialize CloudFormation bits\n",
                    "/opt/aws/bin/cfn-init -v -s ", { "Ref" : "AWS::StackName" }, " -r MongoArbiter",
                    "   --access-key ",  { "Ref" : "AccessKeyId" },
                    "   --secret-key ", {"Ref": "SecretAccessKey" },
                    "   --region ", { "Ref" : "AWS::Region" }, " > /tmp/cfn-init.log 2>&1 || error_exit $(</tmp/cfn-init.log)\n",

                    "yum -y install mongo-10gen-server > /tmp/yum-mongo.log 2>&1\n",
                    
                    "echo '/mnt/var/lib/mongodb /var/lib/mongodb   none bind' | tee -a /etc/fstab\n",
                    "echo '/mnt/var/log/mongodb /var/log/mongodb   none bind' | tee -a /etc/fstab\n",
                    
                    "echo 'replSet=", { "Ref" : "ReplicaSetName" } ,"' | tee -a /etc/mongod.conf\n",

                    "## Start mongod\n",
                    "/etc/init.d/mongod start > /tmp/mongod-start.log 2>&1\n",

                    "## CloudFormation signal that setup is complete\n",
                    "/opt/aws/bin/cfn-signal -e 0 -r \"MongoPrimary setup complete\" '", { "Ref" : "WaitHandleMongoArbiter" }, "'\n"
                ] ] } }
            }
        },

        "WaitHandleMongoArbiter" : {
            "Type" : "AWS::CloudFormation::WaitConditionHandle",
            "Properties" : {}
        },

        "WaitConditionMongoArbiter" : {
            "Type" : "AWS::CloudFormation::WaitCondition",
            "DependsOn" : "MongoArbiter",
            "Properties" : {
                "Handle" : { "Ref" : "WaitHandleMongoArbiter" },
                "Timeout" : "300"
            }
        }
    },

    "Outputs" : {
        "ArbiterInstanceName" : {
            "Value" : { "Fn::GetAtt" : [ "MongoArbiter", "PublicDnsName" ] },
            "Description" : "public DNS name of the new MongoArbiter"
        }
    }
}