{
    "AWSTemplateFormatVersion" : "2010-09-09",

    "Description" : "3-node MongoDB Replica Set with Arbiter deployment with a RAID10 storage configuration with 8 EBS volumes",

    "Parameters" : {
        "KeyName" : {
            "Description" : "Name of an existing EC2 KeyPair to enable SSH access",
            "Type" : "String"
        },

        "InstanceType" : {
            "Type" : "String",
            "Default" : "m1.large",
            "AllowedValues" : [ "t1.micro", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "c1.xlarge", "cc1.4xlarge" ],
            "Description" : "EC2 instance type (e.g. m1.large, m1.xlarge, m2.xlarge)"
        },

        "ArbiterInstanceType" : {
            "Type" : "String",
            "Default" : "t1.micro",
            "AllowedValues" : [ "t1.micro", "m1.small", "m1.medium", "m1.large" ],
            "Description" : "Arbiter EC2 instance type (e.g. t1.micro, m1.small,..)"
        },

        "VolumeSize" : {
            "Description" : "Volume size for each EBS volume",
            "Type" : "Number",
            "Default" : "10"
        },

        "ReplicaSetName" : {
            "Description" : "Name for the MongoDB replica set",
            "Type" : "String",
            "Default" : "MyReplicaSet"
        },

        "SecurityGroupName" : {
            "Description" : "MongoDb security group name",
            "Type" : "String"
        }
    },

    "Mappings" : {
        "InstanceTypeArch" : {
          "t1.micro"    : { "Arch" : "64" },
            "m1.small"    : { "Arch" : "64" },
            "m1.medium"   : { "Arch" : "64" },
            "m1.large"    : { "Arch" : "64" },
            "m1.xlarge"   : { "Arch" : "64" },
            "m2.xlarge"   : { "Arch" : "64" },
            "m2.2xlarge"  : { "Arch" : "64" },
            "m2.4xlarge"  : { "Arch" : "64" },
            "c1.medium"   : { "Arch" : "64" },
            "c1.xlarge"   : { "Arch" : "64" },
            "cc1.4xlarge" : { "Arch" : "64HVM" }
        },

        "RegionImageZone" : {
            "us-east-1"      : { "64" : "ami-3d4ff254", "64HVM" : "ami-e965ba80" },
            "us-west-2"      : { "64" : "ami-20800c10", "64HVM" : "NOT_YET_SUPPORTED" },
            "us-west-1"      : { "64" : "ami-87712ac2", "64HVM" : "NOT_YET_SUPPORTED" },
            "eu-west-1"      : { "64" : "ami-e1e8d395", "64HVM" : "NOT_YET_SUPPORTED" },
            "ap-southeast-1" : { "64" : "ami-a4ca8df6", "64HVM" : "NOT_YET_SUPPORTED" },
            "ap-northeast-1" : { "64" : "ami-60c77761", "64HVM" : "NOT_YET_SUPPORTED" },
            "sa-east-1"      : { "64" : "ami-8cd80691", "64HVM" : "NOT_YET_SUPPORTED" }
        }
    },

    "Resources" : {
        "CfnUser" : {
            "Type" : "AWS::IAM::User",
            "Properties" : {
                "Path": "/",
                "Policies": [ {
                    "PolicyName": "root",
                    "PolicyDocument": { "Statement": [ {
                        "Effect":"Allow",
                        "Action":"cloudformation:DescribeStackResource",
                        "Resource":"*"
                    } ] }
                } ]
            }
        },

        "AccessKey" : {
            "Type" : "AWS::IAM::AccessKey",
            "Properties" : {
                "UserName" : { "Ref" : "CfnUser" }
            }
        },

    "MongoSecondary" : {
            "Type" : "AWS::CloudFormation::Stack",
            "Properties" : {
                "TemplateURL" : "https://s3.amazonaws.com/foxy-cfn/MongoDbServer.template",
                "Parameters" : {
                    "KeyName" : { "Ref" : "KeyName" },
                    "InstanceType" : { "Ref" : "InstanceType" },
                    "VolumeSize" : { "Ref" : "VolumeSize" },
                    "AccessKeyId" : { "Ref" : "AccessKey" },
                    "SecretAccessKey" : {"Fn::GetAtt": ["AccessKey", "SecretAccessKey"]},
                    "ReplicaSetName" : { "Ref" : "ReplicaSetName" },
                    "SecurityGroupName" : { "Ref" : "SecurityGroupName" }
                }
            }
        },

        "MongoArbiter" : {
            "Type" : "AWS::CloudFormation::Stack",
            "DependsOn" : "MongoSecondary",
            "Properties" : {
                "TemplateURL" : "https://s3.amazonaws.com/foxy-cfn/Arbiter.template",
                "Parameters" : {
                    "KeyName" : { "Ref" : "KeyName" },
                    "ArbiterInstanceType" : { "Ref" : "ArbiterInstanceType" },
                    "AccessKeyId" : { "Ref" : "AccessKey" },
                    "SecretAccessKey" : {"Fn::GetAtt": ["AccessKey", "SecretAccessKey"]},
                    "ReplicaSetName" : { "Ref" : "ReplicaSetName" },
                    "SecurityGroupName" : { "Ref" : "SecurityGroupName" }
                }
            }
        },

        "MongoPrimary" : {
            "Type" : "AWS::EC2::Instance",
            "DependsOn" : "MongoArbiter",
            "Metadata" : {
                "AWS::CloudFormation::Init" : {
                    "config" : {
                        "packages" : {
                            "apt" : {
                                "mdadm" : [],
                                "sysstat" : [],
                                "python-setuptools" : []
                            }
                        },
                        "files" : {
                            "/etc/apt/sources.list.d/10gen.list" : {
                                "content" : { "Fn::Join" : ["", [
                                    "deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen\n"
                                ] ] },
                                "mode" : "000644",
                                "owner" : "root",
                                "group" : "root"
                            }
                        }
                    }
                }
            },

            "Properties" : {
                "InstanceType" : { "Ref" : "InstanceType" },
                "Tags" : [
                {"Key" : "Name", "Value" : "MongoPrimary" },
                {"Key" : "Owner", "Value" : "IntegratingStuff" }
            ],
                "ImageId" : { "Fn::FindInMap" : [ "RegionImageZone", { "Ref" : "AWS::Region" },
                    { "Fn::FindInMap" : [ "InstanceTypeArch", { "Ref" : "InstanceType" }, "Arch" ] } ] },
                "SecurityGroups" : [ { "Ref" : "SecurityGroupName" } ],
                "KeyName" : { "Ref" : "KeyName" },
                "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
                    "#!/bin/bash\n",
                    "easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",

                    "## Error reporting helper function\n",
                    "function error_exit\n",
                    "{\n",
                    "  cfn-signal -e 1 -r \"$1\" '", { "Ref" : "WaitHandleMongoPrimary" }, "'\n",
                    "   exit 1\n",
                    "}\n",

                    "## Initialize CloudFormation bits\n",
                    "/opt/aws/bin/cfn-init -v -s ", { "Ref" : "AWS::StackName" }, " -r MongoPrimary",
                    "   --access-key ",  { "Ref" : "AccessKey" },
                    "   --secret-key ", {"Fn::GetAtt": ["AccessKey", "SecretAccessKey"]},
                    "   --region ", { "Ref" : "AWS::Region" }, " > /tmp/cfn-init.log 2>&1 || error_exit $(</tmp/cfn-init.log)\n",

                    "## Waiting for EBS mounts to become available\n",
                    "while [ ! -e /dev/xvdh1 ]; do echo waiting for /dev/xvdh1 to attach; sleep 10; done\n",
                    "while [ ! -e /dev/xvdh2 ]; do echo waiting for /dev/xvdh2 to attach; sleep 10; done\n",
                    "while [ ! -e /dev/xvdh3 ]; do echo waiting for /dev/xvdh3 to attach; sleep 10; done\n",
                    "while [ ! -e /dev/xvdh4 ]; do echo waiting for /dev/xvdh4 to attach; sleep 10; done\n",
                    "while [ ! -e /dev/xvdh5 ]; do echo waiting for /dev/xvdh5 to attach; sleep 10; done\n",
                    "while [ ! -e /dev/xvdh6 ]; do echo waiting for /dev/xvdh6 to attach; sleep 10; done\n",
                    "while [ ! -e /dev/xvdh7 ]; do echo waiting for /dev/xvdh7 to attach; sleep 10; done\n",
                    "while [ ! -e /dev/xvdh8 ]; do echo waiting for /dev/xvdh8 to attach; sleep 10; done\n",

                    "apt-get install -y mongodb-10gen > /tmp/yum-mongo.log 2>&1\n",
                    "service mongodb stop\n",

                    "## Create RAID10 and persist configuration\n",
                    "mdadm --verbose --create /dev/md0 --level=10 --chunk=256 --raid-devices=8 /dev/xvdh1 /dev/xvdh2 /dev/xvdh3 /dev/xvdh4 /dev/xvdh5 /dev/xvdh6 /dev/xvdh7 /dev/xvdh8 > /tmp/mdadm.log 2>&1\n",
                    "echo '`mdadm --detail --scan`' | tee -a /etc/mdadm.conf\n",

                    "## Set read-ahead on each device\n",
                    "blockdev --setra 128 /dev/md0\n",
                    "blockdev --setra 128 /dev/xvdh1\n",
                    "blockdev --setra 128 /dev/xvdh2\n",
                    "blockdev --setra 128 /dev/xvdh3\n",
                    "blockdev --setra 128 /dev/xvdh4\n",
                    "blockdev --setra 128 /dev/xvdh5\n",
                    "blockdev --setra 128 /dev/xvdh6\n",
                    "blockdev --setra 128 /dev/xvdh7\n",
                    "blockdev --setra 128 /dev/xvdh8\n",

                    "## Create physical and logical volumes\n",
                    "dd if=/dev/zero of=/dev/md0 bs=512 count=1\n",
                    "pvcreate /dev/md0\n",
                    "vgcreate vg0 /dev/md0\n",
                    "lvcreate -l 90%vg -n data vg0\n",
                    "lvcreate -l 5%vg -n log vg0\n",
                    "lvcreate -l 5%vg -n journal vg0\n",

                    "## Create filesystems and mount point info\n",
                    "mke2fs -t ext4 -F /dev/vg0/data > /tmp/mke2fs1.log 2>&1\n",
                    "mke2fs -t ext4 -F /dev/vg0/log > /tmp/mke2fs2.log 2>&1\n",
                    "mke2fs -t ext4 -F /dev/vg0/journal > /tmp/mke2fs3.log 2>&1\n",

                    "mkdir /data\n",
                    "mkdir /log\n",
                    "mkdir /journal\n",

                    "echo '/dev/vg0/data /data ext4 defaults,auto,noatime,nodiratime,noexec 0 0' | tee -a /etc/fstab\n",
                    "echo '/dev/vg0/log /log ext4 defaults,auto,noatime,nodiratime,noexec 0 0' | tee -a /etc/fstab\n",
                    "echo '/dev/vg0/journal /journal ext4 defaults,auto,noatime,nodiratime,noexec 0 0' | tee -a /etc/fstab\n",

                    "## Raise file descriptor limits\n",
                    "echo '* hard nofile 100000' | tee -a /etc/security/limits.conf\n",
                    "echo '* soft nofile 100000' | tee -a /etc/security/limits.conf\n",

                    "ulimit -n 100000\n",

                    "mount /data > /tmp/mount1.log 2>&1\n",
                    "mount /log > /tmp/mount2.log 2>&1\n",
                    "mount /journal > /tmp/mount3.log 2>&1\n",

                    "ln -s /journal /data/journal\n",

                    "chown -R mongodb:mongodb /data > /tmp/chown1.log 2>&1\n",
                    "chown -R mongodb:mongodb /log > /tmp/chown2.log 2>&1\n",
                    "chown -R mongodb:mongodb /journal > /tmp/chown3.log 2>&1\n",

                    "## Update mongod configuration\n",
                    "cat <<EOF > /etc/mongodb.conf\n",
                    "logpath=/log/mongodb.log\n",
                    "logappend=true\n",
                    "fork=true\n",
                    "dbpath=/data\n",
                    "rest=true\n",
                    "replSet=", { "Ref" : "ReplicaSetName" } ,"\n",
                    "EOF\n",

                    "## Start mongodb\n",
                    "service mongodb start > /tmp/mongod-start.log 2>&1\n",

                    "## Waiting until mongodb has started\n",
                    "sleep 120\n",

                    "## Create replica set configuration\n",
                    "## The following is only needed on the PRIMARY\n",
                    "HOSTNAME=`/usr/bin/curl -s http://169.254.169.254/latest/meta-data/public-hostname`\n",

                    "cat <<EOF > /tmp/replicaSetConfigInit.js\n",
                    "config = {_id: \"", { "Ref" : "ReplicaSetName" } ,"\", members : [",
                        "{_id : 0, host:\"$HOSTNAME:27017\"},",
                        "{_id : 1, host:\"", { "Fn::GetAtt" : ["MongoSecondary", "Outputs.InstanceName"] },":27017\"},",
                        "{_id : 2, host:\"", { "Fn::GetAtt" : ["MongoArbiter", "Outputs.ArbiterInstanceName"] },":27017\", arbiterOnly: true }",
                    "]};\n",
                    "rs.initiate(config);\n",
                    "EOF\n",

                    "/usr/bin/mongo /tmp/replicaSetConfigInit.js > /tmp/replica-setup.log 2>&1\n",

                    "## CloudFormation signal that setup is complete\n",
                    "cfn-signal -e 0 -r \"MongoPrimary setup complete\" '", { "Ref" : "WaitHandleMongoPrimary" }, "'\n"
                ] ] } }
            }
        },

        "MongoPrimaryVolume1" : {
            "Type" : "AWS::EC2::Volume",
            "Properties" : {
                "Size" : { "Ref" : "VolumeSize" },
                "AvailabilityZone" : { "Fn::GetAtt" : [ "MongoPrimary", "AvailabilityZone" ]}
            }
        },

        "MongoPrimaryVolume2" : {
            "Type" : "AWS::EC2::Volume",
            "Properties" : {
                "Size" : { "Ref" : "VolumeSize" },
                "AvailabilityZone" : { "Fn::GetAtt" : [ "MongoPrimary", "AvailabilityZone" ]}
            }
        },

        "MongoPrimaryVolume3" : {
            "Type" : "AWS::EC2::Volume",
            "Properties" : {
                "Size" : { "Ref" : "VolumeSize" },
                "AvailabilityZone" : { "Fn::GetAtt" : [ "MongoPrimary", "AvailabilityZone" ]}
            }
        },

        "MongoPrimaryVolume4" : {
            "Type" : "AWS::EC2::Volume",
            "Properties" : {
                "Size" : { "Ref" : "VolumeSize" },
                "AvailabilityZone" : { "Fn::GetAtt" : [ "MongoPrimary", "AvailabilityZone" ]}
            }
        },

        "MongoPrimaryVolume5" : {
            "Type" : "AWS::EC2::Volume",
            "Properties" : {
                "Size" : { "Ref" : "VolumeSize" },
                "AvailabilityZone" : { "Fn::GetAtt" : [ "MongoPrimary", "AvailabilityZone" ]}
            }
        },

        "MongoPrimaryVolume6" : {
            "Type" : "AWS::EC2::Volume",
            "Properties" : {
                "Size" : { "Ref" : "VolumeSize" },
                "AvailabilityZone" : { "Fn::GetAtt" : [ "MongoPrimary", "AvailabilityZone" ]}
            }
        },

        "MongoPrimaryVolume7" : {
            "Type" : "AWS::EC2::Volume",
            "Properties" : {
                "Size" : { "Ref" : "VolumeSize" },
                "AvailabilityZone" : { "Fn::GetAtt" : [ "MongoPrimary", "AvailabilityZone" ]}
            }
        },

        "MongoPrimaryVolume8" : {
            "Type" : "AWS::EC2::Volume",
            "Properties" : {
                "Size" : { "Ref" : "VolumeSize" },
                "AvailabilityZone" : { "Fn::GetAtt" : [ "MongoPrimary", "AvailabilityZone" ]}
            }
        },

        "MongoPrimaryVolumeMount1" : {
            "Type" : "AWS::EC2::VolumeAttachment",
            "Properties" : {
                "InstanceId" : { "Ref" : "MongoPrimary" },
                "VolumeId" : { "Ref" : "MongoPrimaryVolume1" },
                "Device" : "/dev/sdh1"
            }
        },

        "MongoPrimaryVolumeMount2" : {
            "Type" : "AWS::EC2::VolumeAttachment",
            "Properties" : {
                "InstanceId" : { "Ref" : "MongoPrimary" },
                "VolumeId" : { "Ref" : "MongoPrimaryVolume2" },
                "Device" : "/dev/sdh2"
            }
        },

        "MongoPrimaryVolumeMount3" : {
            "Type" : "AWS::EC2::VolumeAttachment",
            "Properties" : {
                "InstanceId" : { "Ref" : "MongoPrimary" },
                "VolumeId" : { "Ref" : "MongoPrimaryVolume3" },
                "Device" : "/dev/sdh3"
            }
        },

        "MongoPrimaryVolumeMount4" : {
            "Type" : "AWS::EC2::VolumeAttachment",
            "Properties" : {
                "InstanceId" : { "Ref" : "MongoPrimary" },
                "VolumeId" : { "Ref" : "MongoPrimaryVolume4" },
                "Device" : "/dev/sdh4"
            }
        },

        "MongoPrimaryVolumeMount5" : {
            "Type" : "AWS::EC2::VolumeAttachment",
            "Properties" : {
                "InstanceId" : { "Ref" : "MongoPrimary" },
                "VolumeId" : { "Ref" : "MongoPrimaryVolume5" },
                "Device" : "/dev/sdh5"
            }
        },

        "MongoPrimaryVolumeMount6" : {
            "Type" : "AWS::EC2::VolumeAttachment",
            "Properties" : {
                "InstanceId" : { "Ref" : "MongoPrimary" },
                "VolumeId" : { "Ref" : "MongoPrimaryVolume6" },
                "Device" : "/dev/sdh6"
            }
        },

        "MongoPrimaryVolumeMount7" : {
            "Type" : "AWS::EC2::VolumeAttachment",
            "Properties" : {
                "InstanceId" : { "Ref" : "MongoPrimary" },
                "VolumeId" : { "Ref" : "MongoPrimaryVolume7" },
                "Device" : "/dev/sdh7"
            }
        },

        "MongoPrimaryVolumeMount8" : {
            "Type" : "AWS::EC2::VolumeAttachment",
            "Properties" : {
                "InstanceId" : { "Ref" : "MongoPrimary" },
                "VolumeId" : { "Ref" : "MongoPrimaryVolume8" },
                "Device" : "/dev/sdh8"
            }
        },

        "WaitHandleMongoPrimary" : {
            "Type" : "AWS::CloudFormation::WaitConditionHandle",
            "Properties" : {}
        },

        "WaitConditionMongoPrimary" : {
            "Type" : "AWS::CloudFormation::WaitCondition",
            "DependsOn" : "MongoPrimary",
            "Properties" : {
                "Handle" : { "Ref" : "WaitHandleMongoPrimary" },
                "Timeout" : "300"
            }
        }
    },

    "Outputs" : {
        "PrimaryInstanceName" : {
            "Value" : { "Fn::GetAtt" : [ "MongoPrimary", "PublicDnsName" ] },
            "Description" : "public DNS name of the MongoPrimary"
        },
        "SecondaryInstanceName" : {
            "Value" : { "Fn::GetAtt" : [ "MongoSecondary", "Outputs.InstanceName" ] },
            "Description" : "public DNS name of the MongoSecondary"
        },
        "ArbiterInstanceName" : {
            "Value" : { "Fn::GetAtt" : [ "MongoArbiter", "Outputs.ArbiterInstanceName" ] },
            "Description" : "public DNS name of the MongoDB Arbiter"
        }
    }
}
